const SettlementUtilsTest = artifacts.require("SettlementUtilsTest");

import * as chai from "chai";
import * as chaiAsPromised from "chai-as-promised";
chai.use(chaiAsPromised);
chai.should();

contract("SettlementUtils", function () {

    let settlementTest;
    let buyID_1, sellID_1;
    let buyID_2, sellID_2;

    before(async function () {
        settlementTest = await SettlementUtilsTest.new();
        buyID_1 = "0x309a5df8e76da11abee911c97709a9b891dce6d2694d3161b59f36fe8529cbc0";
        sellID_1 = "0x552f5b31734e6acf2f7808cd8b1be9bb61d33c216a106e1e91bb5fdb220108e0";
        buyID_2 = "0x9f04727e60fb1cf26bbb5e899df82ba24f191fb2b5ae4e864bb54aa1efa9e667";
        sellID_2 = "0x74bc6713b59b03a9037f267cbecfa202729c249eba6cf0767870d6c6c33e0148";
    });

    it("submitOrder", async () => {
        // sellID_1?
        await settlementTest.submitOrder(
            "0x0000000000000000000000000000000000000000000000000000000000000001",
            "0x0000000000000000000000000000000000000000000000000000000000000001",
            "0x0000000000000000000000000000000000000000000000000000000000000001",
            "0x000000000000000000000000000000000000000000000000000000005b2a43a2",
            "0x0000000000000000000000000000000000000000000000000000000100010001",
            "0x00000000000000000000000000000000000000000000000000000000000000e6",
            "0x0000000000000000000000000000000000000000000000000000000000000023",
            "0x0000000000000000000000000000000000000000000000000000000000000005",
            "0x000000000000000000000000000000000000000000000000000000000000000f",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x8d981922c65b85a257f457ba3c29831aa4c3b1bd45dc3b280590fd5c89c69dc2",
        );

        // buyID_1?
        await settlementTest.submitOrder(
            "0x0000000000000000000000000000000000000000000000000000000000000001",
            "0x0000000000000000000000000000000000000000000000000000000000000001",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x000000000000000000000000000000000000000000000000000000005b2ae1b5",
            "0x0000000000000000000000000000000000000000000000000000000100010001",
            "0x00000000000000000000000000000000000000000000000000000000000000eb",
            "0x0000000000000000000000000000000000000000000000000000000000000023",
            "0x000000000000000000000000000000000000000000000000000000000000000a",
            "0x000000000000000000000000000000000000000000000000000000000000000b",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x242efbba437ce0c8b22392130c3f688ca01492792a3a04899d66dce0ffa31b72",
        );

        // sellID_2?
        await settlementTest.submitOrder(
            "0x0000000000000000000000000000000000000000000000000000000000000001",
            "0x0000000000000000000000000000000000000000000000000000000000000001",
            "0x0000000000000000000000000000000000000000000000000000000000000001",
            "0x000000000000000000000000000000000000000000000000000000005b298e47",
            "0x0000000000000000000000000000000000000000000000000000000100000100",
            "0x0000000000000000000000000000000000000000000000000000000000000640",
            "0x0000000000000000000000000000000000000000000000000000000000000024",
            "0x0000000000000000000000000000000000000000000000000000000000000007",
            "0x000000000000000000000000000000000000000000000000000000000000000d",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0xccd3dd4361d50a9df13af30388e2574b5e9e875c638bdfd15efb47395686ac3d",
        );

        // buyID_2?
        await settlementTest.submitOrder(
            "0x0000000000000000000000000000000000000000000000000000000000000001",
            "0x0000000000000000000000000000000000000000000000000000000000000001",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x000000000000000000000000000000000000000000000000000000005b2a2706",
            "0x0000000000000000000000000000000000000000000000000000000100000100",
            "0x0000000000000000000000000000000000000000000000000000000000000653",
            "0x0000000000000000000000000000000000000000000000000000000000000024",
            "0x0000000000000000000000000000000000000000000000000000000000000019",
            "0x000000000000000000000000000000000000000000000000000000000000000b",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            "0x799f3c0f186049d0e59e51bd145d23b30a6a7657ef591ce345ab6f89ef9cbad7",
        );
    });

    it("verifyOrder", async () => {
        await settlementTest.verifyOrder(buyID_1);
        await settlementTest.verifyOrder(buyID_2);
        await settlementTest.verifyOrder(sellID_1);
        await settlementTest.verifyOrder(sellID_2);
    });

    it("submitMatch", async () => {
        await settlementTest.verifyMatch(
            buyID_2,
            sellID_2,
        );
    });

    it("tupleToPrice", async () => {
        // Negative scaling
        (await settlementTest.tupleToPrice(1000000000, 20, 18)).toNumber()
            .should.be.equal(5000000);

        // 0 scaling
        (await settlementTest.tupleToPrice(1000000000, 23, 18)).toNumber()
            .should.be.equal(5000000000);

        // Positive scaling
        (await settlementTest.tupleToPrice(1000000000, 24, 18)).toNumber()
            .should.be.equal(50000000000);
    });
});
